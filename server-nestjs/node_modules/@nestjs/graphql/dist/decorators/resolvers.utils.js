"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
const optional = require("optional");
const graphql_constants_1 = require("../graphql.constants");
const { FieldResolver } = optional('type-graphql') || {};
function addResolverMetadata(resolver, name, target, key, descriptor) {
    common_1.SetMetadata(graphql_constants_1.RESOLVER_TYPE_METADATA, resolver || name)(target, key, descriptor);
    common_1.SetMetadata(graphql_constants_1.RESOLVER_NAME_METADATA, name)(target, key, descriptor);
}
exports.addResolverMetadata = addResolverMetadata;
function createPropertyDecorator(propertyName, typeFunc, options) {
    return (target, key, descriptor) => {
        common_1.SetMetadata(graphql_constants_1.RESOLVER_NAME_METADATA, propertyName)(target, key, descriptor);
        common_1.SetMetadata(graphql_constants_1.RESOLVER_PROPERTY_METADATA, true)(target, key, descriptor);
        const isField = propertyName !== graphql_constants_1.FIELD_TYPENAME && key !== graphql_constants_1.FIELD_TYPENAME;
        if (FieldResolver && isField) {
            FieldResolver(typeFunc, options)(target, key, descriptor);
        }
    };
}
exports.createPropertyDecorator = createPropertyDecorator;
function createDelegateDecorator(propertyName, typeFunc, options) {
    return (target, key, descriptor) => {
        common_1.SetMetadata(graphql_constants_1.RESOLVER_NAME_METADATA, propertyName)(target, key, descriptor);
        common_1.SetMetadata(graphql_constants_1.RESOLVER_DELEGATE_METADATA, propertyName)(target, key, descriptor);
        FieldResolver && FieldResolver(typeFunc, options)(target, key, descriptor);
    };
}
exports.createDelegateDecorator = createDelegateDecorator;
exports.getClassName = (nameOrType) => {
    if (shared_utils_1.isString(nameOrType)) {
        return nameOrType;
    }
    return isConstructor(nameOrType)
        ? nameOrType.name
        : shared_utils_1.isFunction(nameOrType)
            ? nameOrType().name
            : undefined;
};
function isConstructor(obj) {
    return (!!obj.prototype &&
        !!obj.prototype.constructor &&
        !!obj.prototype.constructor.name);
}
